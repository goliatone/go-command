// Code generated by options-setters; DO NOT EDIT.

package runner

import "time"

type TimeoutGetter interface {
	GetTimeout() time.Duration
}

func WithTimeoutSetter(s TimeoutGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.timeout = s.GetTimeout()
		}
	}
}

type DeadlineGetter interface {
	GetDeadline() time.Time
}

func WithDeadlineSetter(s DeadlineGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.deadline = s.GetDeadline()
		}
	}
}

type RunOnceGetter interface {
	GetRunOnce() bool
}

func WithRunOnceSetter(s RunOnceGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.runOnce = s.GetRunOnce()
		}
	}
}

type MaxRetriesGetter interface {
	GetMaxRetries() int
}

func WithMaxRetriesSetter(s MaxRetriesGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.maxRetries = s.GetMaxRetries()
		}
	}
}

type MaxRunsGetter interface {
	GetMaxRuns() int
}

func WithMaxRunsSetter(s MaxRunsGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.maxRuns = s.GetMaxRuns()
		}
	}
}

type ErrorHandlerGetter interface {
	GetErrorHandler() func(error)
}

func WithErrorHandlerSetter(s ErrorHandlerGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.errorHandler = s.GetErrorHandler()
		}
	}
}

type LoggerGetter interface {
	GetLogger() Logger
}

func WithLoggerSetter(s LoggerGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.logger = s.GetLogger()
		}
	}
}

type DoneHandlerGetter interface {
	GetDoneHandler() func(*Handler)
}

func WithDoneHandlerSetter(s DoneHandlerGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.doneHandler = s.GetDoneHandler()
		}
	}
}

type RetryStrategyGetter interface {
	GetRetryStrategy() RetryStrategy
}

func WithRetryStrategySetter(s RetryStrategyGetter) Option {
	return func(cs *Handler) {
		if s != nil {
			cs.retryStrategy = s.GetRetryStrategy()
		}
	}
}

// WithConfigurator sets multiple options from
// a single configuration struct that implements
// one or more Getter interfaces
func WithConfigurator(i interface{}) Option {
	return func(cs *Handler) {

		if s, ok := i.(TimeoutGetter); ok {
			cs.timeout = s.GetTimeout()
		}

		if s, ok := i.(DeadlineGetter); ok {
			cs.deadline = s.GetDeadline()
		}

		if s, ok := i.(RunOnceGetter); ok {
			cs.runOnce = s.GetRunOnce()
		}

		if s, ok := i.(MaxRetriesGetter); ok {
			cs.maxRetries = s.GetMaxRetries()
		}

		if s, ok := i.(MaxRunsGetter); ok {
			cs.maxRuns = s.GetMaxRuns()
		}

		if s, ok := i.(ErrorHandlerGetter); ok {
			cs.errorHandler = s.GetErrorHandler()
		}

		if s, ok := i.(LoggerGetter); ok {
			cs.logger = s.GetLogger()
		}

		if s, ok := i.(DoneHandlerGetter); ok {
			cs.doneHandler = s.GetDoneHandler()
		}

		if s, ok := i.(RetryStrategyGetter); ok {
			cs.retryStrategy = s.GetRetryStrategy()
		}

	}
}
