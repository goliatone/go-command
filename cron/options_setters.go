// Code generated by options-setters; DO NOT EDIT.

package cron

import (
	"io"
	"time"
)

type LocationGetter interface {
	GetLocation() *time.Location
}

func WithLocationSetter(s LocationGetter) Option {
	return func(cs *Scheduler) {
		if s != nil {
			cs.location = s.GetLocation()
		}
	}
}

type LoggerGetter interface {
	GetLogger() Logger
}

func WithLoggerSetter(s LoggerGetter) Option {
	return func(cs *Scheduler) {
		if s != nil {
			cs.logger = s.GetLogger()
		}
	}
}

type LogWriterGetter interface {
	GetLogWriter() io.Writer
}

func WithLogWriterSetter(s LogWriterGetter) Option {
	return func(cs *Scheduler) {
		if s != nil {
			cs.logWriter = s.GetLogWriter()
		}
	}
}

type LogLevelGetter interface {
	GetLogLevel() LogLevel
}

func WithLogLevelSetter(s LogLevelGetter) Option {
	return func(cs *Scheduler) {
		if s != nil {
			cs.logLevel = s.GetLogLevel()
		}
	}
}

type ErrorHandlerGetter interface {
	GetErrorHandler() func(error)
}

func WithErrorHandlerSetter(s ErrorHandlerGetter) Option {
	return func(cs *Scheduler) {
		if s != nil {
			cs.errorHandler = s.GetErrorHandler()
		}
	}
}

type ParserGetter interface {
	GetParser() Parser
}

func WithParserSetter(s ParserGetter) Option {
	return func(cs *Scheduler) {
		if s != nil {
			cs.parser = s.GetParser()
		}
	}
}

// WithConfigurator sets multiple options from
// a single configuration struct that implements
// one or more Getter interfaces
func WithConfigurator(i interface{}) Option {
	return func(cs *Scheduler) {

		if s, ok := i.(LocationGetter); ok {
			cs.location = s.GetLocation()
		}

		if s, ok := i.(LoggerGetter); ok {
			cs.logger = s.GetLogger()
		}

		if s, ok := i.(LogWriterGetter); ok {
			cs.logWriter = s.GetLogWriter()
		}

		if s, ok := i.(LogLevelGetter); ok {
			cs.logLevel = s.GetLogLevel()
		}

		if s, ok := i.(ErrorHandlerGetter); ok {
			cs.errorHandler = s.GetErrorHandler()
		}

		if s, ok := i.(ParserGetter); ok {
			cs.parser = s.GetParser()
		}

	}
}
